services:
  # Database
  postgres:
    image: postgres:15
    container_name: flashcard-db-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - flashcard-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Development Backend with hot reload
  api-dev:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: flashcard-api-dev
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      AT_SECRET: ${AT_SECRET}
      RT_SECRET: ${RT_SECRET}
      BACKEND_PORT: ${BACKEND_PORT}
      FRONTEND_URL: ${FRONTEND_URL}
      NODE_ENV: ${NODE_ENV}
      GEMINI_KEY: ${GEMINI_KEY}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - flashcard-network-dev
    command: npm run start:dev
    stdin_open: true
    tty: true

  # Development Frontend with hot reload
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: flashcard-frontend-dev
    environment:
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NODE_ENV=${NODE_ENV}
      - NEXT_TELEMETRY_DISABLED=1
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - /app/.git
    networks:
      - flashcard-network-dev
    depends_on:
      - api-dev
    command: npm run dev
    stdin_open: true
    tty: true

volumes:
  postgres_data_dev:

networks:
  flashcard-network-dev:
    driver: bridge